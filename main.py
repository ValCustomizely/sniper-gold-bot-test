"""
Bot de trading or - Version avanc√©e multi-pivots
Point d'entr√©e principal
"""
import asyncio
import os
from datetime import datetime
from src.config import Config
from src.api_client import PolygonClient
from src.notion_client import NotionManager
from src.enhanced_signal_detector import EnhancedSignalDetector
from src.threshold_manager import ThresholdManager
from src.pivot_state_manager import PivotStateManager
from src.pivot_session_manager import PivotSessionManager
from src.state_manager import StateManager
from src.logger import Logger

logger = Logger()

class GoldTradingBot:
    def __init__(self):
        self.config = Config()
        self.config.validate()
        
        # Clients API
        self.polygon_client = PolygonClient(self.config.POLYGON_API_KEY)
        self.notion_manager = NotionManager(
            self.config.NOTION_API_KEY, 
            self.config.NOTION_DATABASE_ID, 
            self.config.SEUILS_DATABASE_ID
        )
        
        # Gestionnaires d'√©tat et de sessions
        self.pivot_state_manager = PivotStateManager()
        self.session_manager = PivotSessionManager(self.polygon_client)
        self.threshold_manager = ThresholdManager(self.notion_manager)
        self.state_manager = StateManager()  # Gard√© pour compatibilit√©
        
        # D√©tecteur de signaux avanc√©
        self.signal_detector = EnhancedSignalDetector(
            self.pivot_state_manager, 
            self.session_manager
        )
        
        self.last_updates = set()

    async def should_update_thresholds(self):
        """V√©rifie s'il faut mettre √† jour les seuils automatiquement"""
        now = datetime.utcnow()
        today = now.date().isoformat()
        update_key = f"{today}_1"
        
        # Mise √† jour automatique √† 1h (maintenue pour les pivots classiques de base)
        if now.hour == 1 and update_key not in self.last_updates:
            self.last_updates.add(update_key)
            return True
        
        # V√©rification de s√©curit√© : si pas de seuils pour aujourd'hui
        await self.threshold_manager.load_daily_thresholds()
        if not self.threshold_manager.get_thresholds():
            logger.warning(f"Aucun seuil trouv√© pour {today}, g√©n√©ration automatique")
            return True
            
        return False

    async def update_automatic_thresholds(self):
        """Met √† jour les seuils automatiquement bas√©s sur les donn√©es de la veille"""
        try:
            logger.info("Mise √† jour automatique des seuils (compatibilit√©)")
            
            # R√©cup√©rer les donn√©es de la derni√®re session
            last_day_data = await self.polygon_client.get_last_trading_day_data()
            if not last_day_data:
                logger.warning("Aucune donn√©e trouv√©e pour la derni√®re session")
                return False

            # Calculer les nouveaux seuils
            thresholds = self.threshold_manager.calculate_pivot_points(last_day_data)
            if not thresholds:
                logger.error("Impossible de calculer les seuils")
                return False
            
            # Sauvegarder dans Notion
            await self.notion_manager.save_thresholds(thresholds)
            
            logger.info(f"Seuils mis √† jour: {len(thresholds)} seuils sauvegard√©s")
            return True
            
        except Exception as e:
            logger.error(f"Erreur mise √† jour seuils auto: {e}")
            return False

    async def process_current_data(self):
        """Traite les donn√©es actuelles et g√©n√®re les signaux"""
        try:
            # R√©cup√©rer le prix actuel
            current_data = await self.polygon_client.get_current_minute_data()
            if not current_data:
                logger.warning("Pas de donn√©es minute disponibles")
                return

            current_price = current_data["close"]
            volume = current_data["volume"]
            
            # D√©tecter les signaux avec le syst√®me avanc√©
            signal = await self.signal_detector.detect_signals(current_price)
            
            if signal:
                # Log du statut du syst√®me
                status = self.signal_detector.get_status_summary()
                logger.info(f"Signal d√©tect√©: {signal['type']} | Pivot: {status['pivot_actif']} | √âtat: {status['etat_cassure']}")
                
                # Sauvegarder le signal avec les informations avanc√©es
                await self._save_advanced_signal(signal, current_price, volume)
                
        except Exception as e:
            logger.error(f"Erreur traitement donn√©es: {e}")

    async def _save_advanced_signal(self, signal, current_price, volume):
        """Sauvegarde un signal avec toutes les informations avanc√©es et enrichies"""
        try:
            # Construire les niveaux de trading
            trading_levels = signal.get("trading_levels", {})
            
            # Construire les m√©tadonn√©es enrichies avec nouvelles fonctionnalit√©s
            metadata = [
                f"Pivot actif: {signal.get('pivot_actif', 'N/A')}",
                f"Session: {signal.get('session', 'N/A')} ({signal.get('session_activity', 'N/A')})",
                f"√âtat: {signal.get('etat_cassure', 'N/A')}"
            ]
            
            # Ajouter les informations de fiabilit√©
            if signal.get("threshold_reliability"):
                reliability = signal["threshold_reliability"]
                if reliability["tentatives"] > 0:
                    metadata.append(f"Fiabilit√© seuil: {reliability['score']}% ({reliability['validees']}/{reliability['tentatives']})")
            
            # Ajouter le contexte temporel
            if signal.get("session_context"):
                ctx = signal["session_context"]
                metadata.append(f"Crit√®res adapt√©s: {ctx['description']}")
                if signal.get("adapted_criteria"):
                    metadata.append(f"Stabilisation: {ctx['stabilization_time']}min")
            
            # Ajouter la confiance
            if signal.get("confidence_modifier"):
                metadata.append(f"Confiance: {signal['confidence_modifier']}")
            
            # Indicateurs sp√©ciaux
            if signal.get("is_fast"):
                metadata.append("Cassure rapide ‚ö°")
            
            if signal.get("stabilization_time"):
                metadata.append(f"Stabilisation: {signal['stabilization_time']:.1f}min")
            
            if signal.get("status") == "semi_neutral":
                metadata.append("‚ö†Ô∏è Revalidation pivot recommand√©e")
            
            comment = "Signal avanc√© v2.0 | " + " | ".join(metadata)
            
            # Sauvegarder dans Notion
            await self.notion_manager.save_signal(signal, current_price, volume, trading_levels, comment)
            
        except Exception as e:
            logger.error(f"Erreur sauvegarde signal avanc√©: {e}")

    async def run_cycle(self):
        """Execute un cycle complet du bot"""
        # Mise √† jour automatique des seuils si n√©cessaire (compatibilit√©)
        if await self.should_update_thresholds():
            await self.update_automatic_thresholds()
        
        # Traitement des donn√©es courantes avec syst√®me avanc√©
        await self.process_current_data()

    async def start(self):
        """D√©marre la boucle principale du bot"""
        logger.info("üöÄ D√©marrage du bot de trading or AVANC√â v2.0")
        logger.info("üìä Nouvelles fonctionnalit√©s:")
        logger.info("   ‚Ä¢ Score de fiabilit√© par seuil")
        logger.info("   ‚Ä¢ Validation contextuelle temporelle") 
        logger.info("   ‚Ä¢ Revalidation apr√®s retour en range")
        logger.info("   ‚Ä¢ Protection contre rebascules inutiles")
        
        # Afficher l'√©tat initial enrichi
        status = self.signal_detector.get_status_summary()
        logger.info(f"√âtat initial - Pivot: {status['pivot_actif']} | Switches: {status['switches_count']}/2")
        
        # V√©rifier si session_context existe avant de l'utiliser
        if 'session_context' in status and status['session_context']:
            session_ctx = status['session_context']
            logger.info(f"Session: {session_ctx['session'].upper()} | "
                       f"Activit√©: {session_ctx['activity_level']} | "
                       f"Crit√®res: {session_ctx['description']}")
        else:
            logger.info("Session: Initialisation en cours...")
            logger.info("Contexte temporel sera disponible au premier cycle")
        
        while True:
            try:
                await self.run_cycle()
                await asyncio.sleep(60)  # Attendre 1 minute
                
            except KeyboardInterrupt:
                logger.info("Arr√™t du bot demand√©")
                break
            except Exception as e:
                logger.error(f"Erreur dans la boucle principale: {e}")
                await asyncio.sleep(60)  # Attendre avant de relancer

async def main():
    """Point d'entr√©e principal"""
    bot = GoldTradingBot()
    await bot.start()

if __name__ == "__main__":
    logger.info(f"[BOOT] Bot Trading Or Avanc√© v2.0 - {datetime.utcnow().isoformat()}")
    logger.info("üîß Am√©liorations strategiques activ√©es:")
    logger.info("   ‚Ä¢ Score de fiabilit√© par seuil")
    logger.info("   ‚Ä¢ Validation contextuelle temporelle")
    logger.info("   ‚Ä¢ Revalidation apr√®s retour en range") 
    logger.info("   ‚Ä¢ Protection contre rebascules inutiles")
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Erreur critique bot: {e}")
